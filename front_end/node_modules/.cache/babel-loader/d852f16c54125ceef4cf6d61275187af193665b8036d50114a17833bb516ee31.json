{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst Warning = data => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const [values, setValues] = useState({});\n  const intergratedValue = data.map(value => {\n    return {\n      ...value,\n      \"error\": errors[value.name],\n      \"value\": values[value.name]\n    };\n  });\n  const Validate = (value, name, validationStandard, required) => {\n    if ((value == null || !value) && required) {\n      setErrors({\n        ...errors,\n        [name]: \" is required\"\n      });\n      return;\n    } else if (value != null) {\n      if (validationStandard === \"name\") {\n        var notName = value.match(/\\d+/g);\n        if (notName !== null) {\n          setErrors({\n            ...errors,\n            [name]: \" can not include a number\"\n          });\n        } else {\n          setErrors({\n            ...errors,\n            [name]: false\n          });\n        }\n      } else if (validationStandard === \"phone\") {\n        var notPhone = value.match(/\\D/g);\n        if (notPhone !== null) {\n          setErrors({\n            ...errors,\n            [name]: \" can not include character\"\n          });\n        } else {\n          setErrors({\n            ...errors,\n            [name]: false\n          });\n        }\n      } else {\n        setErrors({\n          ...errors,\n          [name]: false\n        });\n      }\n    }\n  };\n  /*const addUser=(user)=>{\r\n    fetch(SERVER_URL+'api/doctors',{\r\n      method:'POST',\r\n      headers:{'Content-Type':'application/json'},\r\n      body: JSON.stringify(user)\r\n    }).then(response=>{\r\n      if(response.ok){\r\n        alert('all ok')\r\n      }else{\r\n        alert('something is worng ')\r\n      }\r\n    }).catch(err=>alert(err))\r\n    }*/\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    let issub = true;\n    let temp;\n    temp = intergratedValue.map(element => {\n      if (element.error === false) {\n        return {\n          [element.name]: [false]\n        };\n      } else return {\n        [element.name]: \"shit suck\"\n      };\n    });\n    setErrors(temp);\n  };\n  const handler = (event, type) => {\n    if (type === 'onBlur') {\n      event.persist();\n      intergratedValue.forEach(element => {\n        if (element.name === event.target.name) {\n          Validate(event.target.value, element.name, element.validationType, element.required);\n        }\n      });\n    } else if (type === \"onChange\") {\n      event.persist();\n      setValues({\n        ...values,\n        [event.target.name]: [event.target.value]\n      });\n      intergratedValue.forEach(element => {\n        if (element.name === event.target.name) {\n          Validate(event.target.value, element.name, element.validationType, element.required);\n        }\n      });\n    }\n  };\n  return {\n    handler,\n    handleSubmit,\n    intergratedValue\n  };\n};\n_s(Warning, \"BwG2lzXxOEyI3BpJnM03D0Xu4PE=\");\n_c = Warning;\nexport default Warning;\nvar _c;\n$RefreshReg$(_c, \"Warning\");","map":{"version":3,"names":["useState","Warning","data","_s","errors","setErrors","values","setValues","intergratedValue","map","value","name","Validate","validationStandard","required","notName","match","notPhone","handleSubmit","event","preventDefault","issub","temp","element","error","handler","type","persist","forEach","target","validationType","_c","$RefreshReg$"],"sources":["C:/Ethiopia_Electronic_Health_Record_System/front_end/src/Add_User/warning.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst Warning = (data) => {\r\n  \r\n  const [errors, setErrors] = useState({});\r\n  const [values,setValues]=useState({})\r\n  const intergratedValue=data.map((value)=>{\r\n    return({...value,\"error\":errors[value.name],\"value\":values[value.name]});\r\n  })\r\n  const  Validate=(value,name,validationStandard,required)=>{\r\n    if((value==null||!value) && required){\r\n      setErrors({...errors,[name]:\" is required\"})\r\n      return \r\n    }else if(value!=null){\r\n     if(validationStandard===\"name\"){\r\n          var notName=value.match(/\\d+/g);\r\n          if(notName!==null){\r\n            setErrors({...errors,[name]:\" can not include a number\"})\r\n          }else{\r\n            setErrors({...errors,[name]:false})\r\n          }\r\n      }else if(validationStandard===\"phone\"){\r\n          var notPhone=value.match(/\\D/g)\r\n          if(notPhone!==null){\r\n            setErrors({...errors,[name]:\" can not include character\"})\r\n          }else{\r\n            setErrors({...errors,[name]:false})\r\n          }\r\n      }else{\r\n        setErrors({...errors,[name]:false})\r\n      }\r\n    }\r\n  };\r\n  /*const addUser=(user)=>{\r\n    fetch(SERVER_URL+'api/doctors',{\r\n      method:'POST',\r\n      headers:{'Content-Type':'application/json'},\r\n      body: JSON.stringify(user)\r\n    }).then(response=>{\r\n      if(response.ok){\r\n        alert('all ok')\r\n      }else{\r\n        alert('something is worng ')\r\n      }\r\n    }).catch(err=>alert(err))\r\n\r\n  }*/\r\n  const handleSubmit = (event) => {\r\n    if (event) event.preventDefault();\r\n    let issub=true\r\n    let temp;\r\n    temp=intergratedValue.map((element)=>{\r\n      if(element.error===false){\r\n        return ({[element.name]:[false]})\r\n      }else\r\n        return ({[element.name]:\"shit suck\"})\r\n    })\r\n    setErrors(temp);\r\n\r\n    };\r\n  const handler = (event,type) => {\r\n      if(type==='onBlur'){\r\n        event.persist();\r\n        intergratedValue.forEach(element => {\r\n            if(element.name===event.target.name){\r\n              Validate(event.target.value,element.name,element.validationType,element.required);\r\n            }\r\n        });\r\n\r\n      }else if(type===\"onChange\"){\r\n        event.persist()\r\n        setValues({...values,[event.target.name]:[event.target.value]});\r\n        intergratedValue.forEach(element => {\r\n          if(element.name===event.target.name){\r\n            Validate(event.target.value,element.name,element.validationType,element.required);\r\n          }\r\n      });\r\n      }\r\n  };\r\n\r\n  return {\r\n    handler,\r\n    handleSubmit,\r\n    intergratedValue\r\n  }\r\n};\r\n\r\n\r\nexport default Warning"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAIC,IAAI,IAAK;EAAAC,EAAA;EAExB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACM,MAAM,EAACC,SAAS,CAAC,GAACP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMQ,gBAAgB,GAACN,IAAI,CAACO,GAAG,CAAEC,KAAK,IAAG;IACvC,OAAO;MAAC,GAAGA,KAAK;MAAC,OAAO,EAACN,MAAM,CAACM,KAAK,CAACC,IAAI,CAAC;MAAC,OAAO,EAACL,MAAM,CAACI,KAAK,CAACC,IAAI;IAAC,CAAC;EACzE,CAAC,CAAC;EACF,MAAOC,QAAQ,GAACA,CAACF,KAAK,EAACC,IAAI,EAACE,kBAAkB,EAACC,QAAQ,KAAG;IACxD,IAAG,CAACJ,KAAK,IAAE,IAAI,IAAE,CAACA,KAAK,KAAKI,QAAQ,EAAC;MACnCT,SAAS,CAAC;QAAC,GAAGD,MAAM;QAAC,CAACO,IAAI,GAAE;MAAc,CAAC,CAAC;MAC5C;IACF,CAAC,MAAK,IAAGD,KAAK,IAAE,IAAI,EAAC;MACpB,IAAGG,kBAAkB,KAAG,MAAM,EAAC;QAC1B,IAAIE,OAAO,GAACL,KAAK,CAACM,KAAK,CAAC,MAAM,CAAC;QAC/B,IAAGD,OAAO,KAAG,IAAI,EAAC;UAChBV,SAAS,CAAC;YAAC,GAAGD,MAAM;YAAC,CAACO,IAAI,GAAE;UAA2B,CAAC,CAAC;QAC3D,CAAC,MAAI;UACHN,SAAS,CAAC;YAAC,GAAGD,MAAM;YAAC,CAACO,IAAI,GAAE;UAAK,CAAC,CAAC;QACrC;MACJ,CAAC,MAAK,IAAGE,kBAAkB,KAAG,OAAO,EAAC;QAClC,IAAII,QAAQ,GAACP,KAAK,CAACM,KAAK,CAAC,KAAK,CAAC;QAC/B,IAAGC,QAAQ,KAAG,IAAI,EAAC;UACjBZ,SAAS,CAAC;YAAC,GAAGD,MAAM;YAAC,CAACO,IAAI,GAAE;UAA4B,CAAC,CAAC;QAC5D,CAAC,MAAI;UACHN,SAAS,CAAC;YAAC,GAAGD,MAAM;YAAC,CAACO,IAAI,GAAE;UAAK,CAAC,CAAC;QACrC;MACJ,CAAC,MAAI;QACHN,SAAS,CAAC;UAAC,GAAGD,MAAM;UAAC,CAACO,IAAI,GAAE;QAAK,CAAC,CAAC;MACrC;IACF;EACF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC9B,IAAIA,KAAK,EAAEA,KAAK,CAACC,cAAc,EAAE;IACjC,IAAIC,KAAK,GAAC,IAAI;IACd,IAAIC,IAAI;IACRA,IAAI,GAACd,gBAAgB,CAACC,GAAG,CAAEc,OAAO,IAAG;MACnC,IAAGA,OAAO,CAACC,KAAK,KAAG,KAAK,EAAC;QACvB,OAAQ;UAAC,CAACD,OAAO,CAACZ,IAAI,GAAE,CAAC,KAAK;QAAC,CAAC;MAClC,CAAC,MACC,OAAQ;QAAC,CAACY,OAAO,CAACZ,IAAI,GAAE;MAAW,CAAC;IACxC,CAAC,CAAC;IACFN,SAAS,CAACiB,IAAI,CAAC;EAEf,CAAC;EACH,MAAMG,OAAO,GAAGA,CAACN,KAAK,EAACO,IAAI,KAAK;IAC5B,IAAGA,IAAI,KAAG,QAAQ,EAAC;MACjBP,KAAK,CAACQ,OAAO,EAAE;MACfnB,gBAAgB,CAACoB,OAAO,CAACL,OAAO,IAAI;QAChC,IAAGA,OAAO,CAACZ,IAAI,KAAGQ,KAAK,CAACU,MAAM,CAAClB,IAAI,EAAC;UAClCC,QAAQ,CAACO,KAAK,CAACU,MAAM,CAACnB,KAAK,EAACa,OAAO,CAACZ,IAAI,EAACY,OAAO,CAACO,cAAc,EAACP,OAAO,CAACT,QAAQ,CAAC;QACnF;MACJ,CAAC,CAAC;IAEJ,CAAC,MAAK,IAAGY,IAAI,KAAG,UAAU,EAAC;MACzBP,KAAK,CAACQ,OAAO,EAAE;MACfpB,SAAS,CAAC;QAAC,GAAGD,MAAM;QAAC,CAACa,KAAK,CAACU,MAAM,CAAClB,IAAI,GAAE,CAACQ,KAAK,CAACU,MAAM,CAACnB,KAAK;MAAC,CAAC,CAAC;MAC/DF,gBAAgB,CAACoB,OAAO,CAACL,OAAO,IAAI;QAClC,IAAGA,OAAO,CAACZ,IAAI,KAAGQ,KAAK,CAACU,MAAM,CAAClB,IAAI,EAAC;UAClCC,QAAQ,CAACO,KAAK,CAACU,MAAM,CAACnB,KAAK,EAACa,OAAO,CAACZ,IAAI,EAACY,OAAO,CAACO,cAAc,EAACP,OAAO,CAACT,QAAQ,CAAC;QACnF;MACJ,CAAC,CAAC;IACF;EACJ,CAAC;EAED,OAAO;IACLW,OAAO;IACPP,YAAY;IACZV;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAnFIF,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAsFb,eAAeA,OAAO;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}